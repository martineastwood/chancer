pool[sample(1:nchar(pool), 1)]
pool <- paste0(letters, SYMBOLS)
pool[sample(1:nchar(pool), 1)]
pool
nchar(pool)
1:nchar(pool)
sample(1:nchar(pool), 1)
pool[4]
tmp <- sample(1:nchar(pool), 1)
substr(pool, tmp, tmp)
chance.character <- function(case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), 1)
return(substr(pool, tmp, tmp))
}
chance.character()
chance.character(case='lower')
chance.character(case='upper')
chance.character(case='upper')
chance.character(case='upper')
chance.character(case='upper')
chance.character <- function(case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbols'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), 1)
return(substr(pool, tmp, tmp))
}
chance.character(case='upper', pool='alpha')
chance.character(case='upper', pool='alpha')
chance.character(case='lower', pool='alpha')
chance.character(case='lower', pool='numeric')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
}else if(pool=='symbol'){
chance.character <- function(case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), 1)
return(substr(pool, tmp, tmp))
}
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character(case='lower', pool='symbol')
chance.character <- function(n=1,
case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), 1)
return(substr(pool, tmp, tmp))
}
chance.character(case='lower', pool='symbol')
chance.character(n=5, case='lower', pool='symbol')
chance.character <- function(n=1,
case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), n)
return(substr(pool, tmp, tmp))
}
chance.character(n=5, case='lower', pool='symbol')
pool
sample(1:nchar(pool), n)
n = 5
tmp <- sample(1:nchar(pool), n)
tmp
sapply(tmp, function(x){
substr(pool, x, x)
})
chance.character <- function(n=1,
case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), n)
chars <- sapply(tmp, function(x){
substr(pool, x, x)
})
# and return
return(chars)
}
chance.character <- function(n=1,
case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
if(!is.null(user)){
pool <- user
}
# pick the random char
tmp <- sample(1:nchar(pool), n)
chars <- sapply(tmp, function(x){
substr(pool, x, x)
})
# and return
return(chars)
}
chance.character()
chance.character(n=10)
chance.character(n=10, case='lower', pool='abcgdwgfgaaaaaaaa')
chance.character(n=10, case='lower', user='abcgdwgfgaaaaaaaa')
chance.bool <- function(n=1, likelihood=50){
if(likelihood < 0 || likelihood > 100){
stop("chance.bool accepts values from 0 to 100")
}
return(runif(n) * 100 >= likelihood)
}
chance.bool()
chance.bool(10)
chance.bool(-1)
chance.character <- function(n=1,
case=c('all', 'lower', 'upper'),
pool=c('all', 'alpha', 'numeric', 'symbol'),
user=NULL){
# check what case to use
casing <- match.arg(case)
if(casing == 'upper'){
letters <- CHARS_UPPER
}else if(casing == 'lower'){
letters <- CHARS_LOWER
}else if(casing == 'all'){
letters <- paste0(CHARS_UPPER, CHARS_LOWER)
}else{
stop("casing must be one of 'upper', 'lower' or 'all'")
}
# check what pool of chars to use
pooling <- match.arg(pool)
if(pooling == 'all'){
pool <- paste0(letters, SYMBOLS)
}else if(pool=='alpha'){
pool <- letters
}else if(pool=='numeric'){
pool <- NUMBERS
}else if(pool=='symbol'){
pool <- SYMBOLS
}
# are we using user pool of chars?
if(!is.null(user)){
pool <- user
}
# pick the random chars
chars <- sapply(sample(1:nchar(pool), n), function(x){
substr(pool, x, x)
})
# and return
return(chars)
}
chance.character(20)
library(chance)
?roxygen
??roxygen
library(roxygen2)
namespace_roclet()
namespace_roclet('chance')
roxygenise(getwd())
library(chance)
set.seed(86858246)
expect_that(chance.android_id(), equals("APA91jOeNDCpO8pQ1XCquoQFSDT43blvzeuD4HRwXqSAcpSEiO3lxYf-DXgtCtVLxDuS5czUm-nAFzump2R7W1ycAmkxYhDf9k-twN-YH7CYY9G7RLUA1CjeBaC5zsySBvZiFQGWv6Pm677l7Dv-2_i0gE64Ynl3tG-J1GoWLYYqewTFvvaYAVH"))
expect_that(chance.apple_token(), equals("45c7e1c93ab81a9421ec5c1cb5e9ea1c6a41845ee92b1b8f03a6340272b7d715"))
library(testthat)
library(chance)
test_check("chance")
set.seed(86858246)
expect_that(chance.android_id(), equals("APA91jOeNDCpO8pQ1XCquoQFSDT43blvzeuD4HRwXqSAcpSEiO3lxYf-DXgtCtVLxDuS5czUm-nAFzump2R7W1ycAmkxYhDf9k-twN-YH7CYY9G7RLUA1CjeBaC5zsySBvZiFQGWv6Pm677l7Dv-2_i0gE64Ynl3tG-J1GoWLYYqewTFvvaYAVH"))
expect_that(chance.apple_token(), equals("45c7e1c93ab81a9421ec5c1cb5e9ea1c6a41845ee92b1b8f03a6340272b7d715"))
chance.bb_pin()
test_that("chance.mobile works as expected", {
set.seed(86858246)
expect_that(chance.android_id(), equals("APA91jOeNDCpO8pQ1XCquoQFSDT43blvzeuD4HRwXqSAcpSEiO3lxYf-DXgtCtVLxDuS5czUm-nAFzump2R7W1ycAmkxYhDf9k-twN-YH7CYY9G7RLUA1CjeBaC5zsySBvZiFQGWv6Pm677l7Dv-2_i0gE64Ynl3tG-J1GoWLYYqewTFvvaYAVH"))
expect_that(chance.apple_token(), equals("45c7e1c93ab81a9421ec5c1cb5e9ea1c6a41845ee92b1b8f03a6340272b7d715"))
expect_that(chance.bb_pin(), equals("49511dd1"))
})
library(chance)
chance.string()
?chance.string
chance.string(8, user=guid.pool)
guid_pool <- "abcdef1234567890"
variant_pool <- "ab89"
chance.string(8, user=guid.pool)
guid_pool <- "abcdef1234567890"
variant_pool <- "ab89"
chance.string(8, user=guid_pool)
past0(chance.string(8, user=guid_pool), "-")
paste0(chance.string(8, user=guid_pool), "-")
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool))
version=5
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool, "-"), "-",
version, chance.string(3, user=guid_pool))
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool, "-"), "-",
version)
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-", "-",
version)
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
version)
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
version, chance.string(3, user=guid_pool))
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(12, user=guid_pool), "-")
paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(12, user=guid_pool))
#' Select a random element from a vector
#'
#' @param vec vector to select from
#' @export
#' @examples
#' chance.pick(c(1, 2, 3, 4))
chance.pick <- function(vec=NULL){
if(is.null(vec)){
stop('a vector of data must be provided to select from')
}
return(sample(vec, 1))
}
#' Selects a random element from a vector using weighted probabilities
#'
#' @param vec vector to select from
#' @export
#' @examples
#' chance.weighted(c(1, 2, 3), c(0.5, 0.4, 0.1))
chance.weighted <- function(vec=NULL, probs=NULL){
if(is.null(vec) || is.null(probs) || length(vec) != length(probs)){
stop('vectors of equal lengths must be supplied for the data and
their probabilities')
}
return(sample(vec, 1, prob=probs))
}
#' Get a random hex hash
#'
#' @param case can be 'upper' or 'lower'
#' @param len length of hash, defaults to 64
#' @export
#' @examples
#' chance.hash()
#' chance.hash(case='upper')
chance.hash <- function(len=64, case='lower'){
if(!case %in% c('lower', 'upper')){
stop("case must be one of lower or upper")
}
pool <- HEX_POOL
if(case=='upper'){
pool <- toupper(pool)
}
chance.string(len=len, user=pool)
}
#' Helper function to capitalise first char in string
#'
#' @param word string to capitalise
#' @param len length of hash, defaults to 64
#' @export
#' @examples
#' chance.hash()
#' chance.hash(case='upper')
chance.capitalise <- function(word){
return(paste0(toupper(substring(word, 1,1)), substring(word, 2, nchar(word))))
}
#' Retun a guid
#'
#' @export
#' @examples
#' chance.guid()
chance.guid <- function(){
guid_pool <- "abcdef1234567890"
variant_pool <- "ab89"
guid <- paste0(chance.string(8, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(4, user=guid_pool), "-",
chance.string(12, user=guid_pool))
return(guid)
}
# Chance.prototype.guid = function (options) {
#   options = initOptions(options, { version: 5 });
#
#   var guid_pool = "abcdef1234567890",
#   variant_pool = "ab89",
#   guid = this.string({ pool: guid_pool, length: 8 }) + '-' +
#     this.string({ pool: guid_pool, length: 4 }) + '-' +
#     // The Version
#   options.version +
#     this.string({ pool: guid_pool, length: 3 }) + '-' +
#     // The Variant
#   this.string({ pool: variant_pool, length: 1 }) +
#     this.string({ pool: guid_pool, length: 3 }) + '-' +
#     this.string({ pool: guid_pool, length: 12 });
#   return guid;
# };
set.seed(86858246)
expect_that(chance.pick(c(1, 2, 3)), equals(1))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
expect_that(chance.hash(), equals("3c996c26d0e9675cad9d1025783791ad7e6d936d94c058f3f9e3797eb897d138"))
expect_that(chance.hash(case='upper'), equals("D5F58A87560D1E0839558F49325F77CFFA19FF2A1DBE909439291868D97F4ADA"))
expect_that(chance.capitalise('test'), equals("Test"))
library(testthat)
set.seed(86858246)
expect_that(chance.pick(c(1, 2, 3)), equals(1))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
expect_that(chance.hash(), equals("3c996c26d0e9675cad9d1025783791ad7e6d936d94c058f3f9e3797eb897d138"))
expect_that(chance.hash(case='upper'), equals("D5F58A87560D1E0839558F49325F77CFFA19FF2A1DBE909439291868D97F4ADA"))
expect_that(chance.capitalise('test'), equals("Test"))
set.seed(86858246)
expect_that(chance.pick(c(1, 2, 3)), equals(1))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
expect_that(chance.hash(), equals("3c996c26d0e9675cad9d1025783791ad7e6d936d94c058f3f9e3797eb897d138"))
chance.hash()
pool <- HEX_POOL
HEX_POOL
pool <- chance:::HEX_POOL
set.seed(86858246)
expect_that(chance.pick(c(1, 2, 3)), equals(1))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
expect_that(chance.pick(c(1, 2, 3)), equals(1))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
expect_that(chance.weighted(c(1, 2, 3), c(0.5, 0.3, 0.2)), equals(2))
chance.guid()
library(chance)
library(chance)
roxygenise(getwd())
library(roxygen2)
roxygenise(getwd())
library(chance)
roxygenise(getwd())
chance.wp7_anid()
