{
    "contents" : "#' Get a random street name\n#'\n#' @param abbreviation TRUE or FALSE whether to abbreviate street name, \n#' e.g Street to St\n#' @export\n#' @examples\n#' chancer.street.suffix()\n#' chancer.street.suffix(abbreviation=TRUE)\nchancer.street.suffix <- function(abbreviation=FALSE){\n  \n  pool <- STREETS$full\n  \n  if(abbreviation){\n    pool <- STREETS$abbreviation\n  }\n  \n  suffix <- chancer.pick(pool)\n  \n  return(suffix)\n}\n\n#' Get a random street name\n#'\n#' @param abbreviation TRUE or FALSE whether to abbreviate street name, \n#' e.g Street to St\n#' @export\n#' @examples\n#' chancer.street()\n#' chancer.street(abbreviation=TRUE)\nchancer.street <- function(abbreviation=FALSE){\n  \n  suffix <- chancer.street.suffix(abbreviation)\n  \n  prefix <- chancer.word(syllables=2)\n  \n  street <- chancer.capitalise(paste(prefix, suffix))\n  \n  return(street)\n}\n\n#' Get a random address\n#'\n#' @param case can be 'upper' or 'lower'\n#' @param len length of hash, defaults to 64\n#' @export\n#' @examples\n#' chancer.address()\n#' chancer.address(abbreviation=TRUE)\nchancer.address <- function(abbreviation=FALSE){\n  \n  street <- chancer.street(abbreviation)\n  \n  num <- chancer.natural(5, 2000)\n  \n  address <- paste(num, street)\n  \n  return(address)\n}\n\n#' Get a random altitude\n#'\n#' @param max maximum altitude in metres, defaults to 8848 (height of Everest)\n#' @export\n#' @examples\n#' chancer.altitude()\n#' chancer.altitude(max=25)\nchancer.altitude <- function(max=8848){\n  return(chancer.floating(min=0, max=max))\n}\n\n\n#' Get a random area code (US only)\n#'\n#' @param parens TRUE or FALSE whether to wrap area code in parentheses\n#' @export\n#' @examples\n#' chancer.areacode()\n#' chancer.areacode(parens=FALSE)\nchancer.areacode <- function(parens=TRUE){\n  \n  ac <- paste0(chancer.natural(2, 9),\n              chancer.natural(0, 8),\n              chancer.natural(0, 9))\n  \n  if(parens){\n    ac <- paste0('(', ac, ')')\n  }\n  \n  return(ac)\n}\n\n\n#' Get a random City name\n#'\n#' @export\n#' @examples\n#' chancer.city()\nchancer.city <- function(){\n  return(chancer.capitalise(chancer.word(syllables=3)))\n}\n\n\n#' Get a random latitude\n#'\n#' @export\n#' @examples\n#' chancer.latitude()\nchancer.latitude <- function(){\n  return(chancer.floating(-90, 90))\n}\n\n\n#' Get a random longitude\n#'\n#' @export\n#' @examples\n#' chancer.longitude()\nchancer.longitude <- function(){\n  return(chancer.floating(-180, 180))\n}\n\n\n#' Get random coordinates\n#'\n#' @param format either 'vector' or 'string'\n#' @export\n#' @examples\n#' chancer.coordinates()\n#' chancer.coordinates(format='string')\nchancer.coordinates <- function(format='vector'){\n  \n  latitude <- chancer.latitude()\n  \n  longitude <- chancer.longitude()\n  \n  if(format=='vector'){\n    coords <- c(latitude=latitude, longitude=longitude)\n  }else if(format=='string'){\n    coords <- paste0(latitude, ', ', longitude)\n  }\n  \n  return(coords)\n}\n\n#' Get a random depth (are always negative)\n#'\n#' @param min minimum value, defaults to -2550 (depth of the Mariana Trench)\n#' @export\n#' @examples\n#' chancer.depth()\n#' chancer.depth(min=-50)\nchancer.depth <- function(min=-2250){\n  return(chancer.floating(min=min, max=0))\n}\n\n\n#' Get a random geohash\n#'\n#' @param len numbers of characters of accuracy (defaults to 7)\n#' @export\n#' @examples\n#' chancer.geohash()\n#' chancer.geohash(len=3)\nchancer.geohash <- function(len=7){\n  return(chancer.string(user=\"0123456789bcdefghjkmnpqrstuvwxyz\", len=len))\n}\n\n",
    "created" : 1418328238663.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "462116958",
    "id" : "D16607B1",
    "lastKnownWriteTime" : 1418327051,
    "path" : "~/Dropbox/martin/github/chancer/R/location.R",
    "project_path" : "R/location.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}