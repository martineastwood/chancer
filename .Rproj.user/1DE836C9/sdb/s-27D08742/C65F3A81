{
    "contents" : "#' Get a random age\n#'\n#' @param type if NULL defaults to age between 1-100 otherwise can be one of\n#' 'child', 'teen', 'adult', 'senior' to pick a pre-defined age range\n#' @export\n#' @examples\n#' chancer.age()\n#' chancer.age(type='child')\n#' chancer.age(type='senior')\nchancer.age <- function(type=NULL){\n  \n  if(is.null(type)){\n    age <- chancer.integer(1, 100)\n  }else if(type=='child'){\n    age <- chancer.integer(1, 12)\n  }else if(type=='teen'){\n    age <- chancer.integer(13, 19)\n  }else if(type=='adult'){\n    age <- chancer.integer(18, 65)\n  }else if(type=='senior'){\n    age <- chancer.integer(65, 100)\n  }else{\n    stop(\"type must be one of NULL, 'child', 'teen', 'adult', 'senior'\")\n  }\n  \n  return(age)  \n}\n\n#' Get a random birthday\n#'\n#' @param type eiter 'POSIXlt' to return a POSIXlt object or 'string' to return \n#' date as a string\n#' @export\n#' @examples\n#' chancer.birthday()\n#' chancer.birthday(type='string')\nchancer.birthday <- function(type='POSIXlt'){\n  \n  bday <- as.POSIXlt(Sys.time())\n  \n  age <- chancer.age()\n  \n  bday$year <- bday$year - age\n  \n  if(type=='POSIXlt'){\n    # do nothing\n  }else if(type=='string'){\n    bday <- as.character(bday, format='%Y-%m-%d %H:%M:%S')\n  }else{\n    stop(\"type must be one of NULL, 'child', 'teen', 'adult', 'senior'\")\n  }\n  \n  return(bday)  \n}\n\n#' Get a random first name\n#'\n#' @param gender defaults to NULL but can get set to either 'male' or 'female'\n#' @export\n#' @examples\n#' chancer.first()\n#' chancer.first(gender='female')\nchancer.first <- function(gender=NULL){\n  \n  if(is.null(gender)){\n    pool <- c(FIRSTNAMES$male, FIRSTNAMES$female)\n    return(chancer.pick(pool))\n  }else if(gender=='male'){\n    return(chancer.pick(FIRSTNAMES$male))\n  }else if(gender=='female'){\n    return(chancer.pick(FIRSTNAMES$female))\n  }else{\n    stop(\"gender must be one of NULL, 'male', 'female'\")\n  }\n}\n\n#' Get a random surname name\n#'\n#' @export\n#' @examples\n#' chancer.last()\nchancer.last <- function(){\n  return(chancer.pick(LASTNAMES))\n}\n\n#' Get a random name\n#'\n#' @param initial TRUE or FALSE to include a middle initial\n#' @param middle_name TRUE or FALSE to include a middle name\n#' @param gender if NULL gender is randomly selected else can be one of\n#' 'male' or 'female'\n#' @param prefix TRUE or FALSE to include a prefix to the name, e.g Doctore, Mister etc\n#' @export\n#' @examples\n#' chancer.name()\n#' chancer.name(initial=TRUE)\n#' chancer.name(middle_name=TRUE)\n#' chancer.name(middle_name=TRUE, prefix=TRUE)\nchancer.name <- function(initial=FALSE, middle_name=FALSE, gender=NULL, prefix=FALSE){\n  \n  if(initial && middle_name){\n    stop('Only one of middle_name and initial can be TRUE')\n  }\n  \n  if(is.null(gender)){\n    gender <- chancer.gender()\n  }\n  \n  if(!gender %in% c('male', 'female')){\n    stop('Gender must be one of male or female')\n  }\n  \n  first <- chancer.first(gender=gender)\n  \n  last <- chancer.last()\n  \n  middle = NULL\n  \n  if(initial){\n    first <- paste(first, chancer.character(case='upper', pool='alpha'))\n  }else if(middle_name){\n    first <- paste(first, chancer.first(gender=gender))\n  }\n  \n  if(prefix){\n    first <- paste(chancer.prefix(gender=gender), first)\n  }\n  \n  full_name <- paste(first, last)\n  \n  return(full_name)\n}\n\n#' Get a random prefix for name, e.g Mister, Doctor etc\n#'\n#' @param gender one of 'male', 'female', 'all'\n#' @param abbreviated boolean whether to abbreviate the prefix or not\n#' @export\n#' @examples\n#' chancer.prefix()\n#' chancer.prefix('male', TRUE)\nchancer.prefix <- function(gender=NULL, abbreviated=FALSE){\n  \n  if(is.null(gender)){\n    if(abbreviated){\n      pool <- unique(c(NAME_PREFIX_MALE$abbreviated, NAME_PREFIX_FEMALE$abbreviated))\n    }else{\n      pool <- unique(c(NAME_PREFIX_MALE$full, NAME_PREFIX_FEMALE$full))\n    }\n  }else if(gender == 'male'){\n    if(abbreviated){\n      pool <- NAME_PREFIX_MALE$abbreviated\n    }else{\n      pool <- NAME_PREFIX_MALE$full\n    }\n  }else if(gender == 'female'){\n    if(abbreviated){\n      pool <- NAME_PREFIX_FEMALE$abbreviated\n    }else{\n      pool <- NAME_PREFIX_FEMALE$full\n    }\n  }else{\n    stop('gender must be one of male, female, NULL')\n  }\n  \n  prefix <- chancer.pick(pool)\n  \n  return(prefix)  \n}\n\n\n#' Get a random gender\n#'\n#' @export\n#' @examples\n#' chancer.gender()\nchancer.gender <- function(type=NULL){\n  \n  pool <- c('male', 'female')\n  \n  gender <- chancer.pick(pool)\n  \n  return(gender)  \n}\n\n#' Get a random social security number\n#'\n#' @param dashes TRUE or FALSE to have the dashes within the social security number\n#' @param last_four whether to return just the last four digits or not\n#' @export\n#' @examples\n#' chancer.ssn()\n#' chancer.ssn(dashes=FALSE)\n#' chancer.ssn(last_four=TRUE)\nchancer.ssn <- function(dashes=TRUE, last_four=FALSE){\n  \n  ssn <- paste0(chancer.integer(0, 9),\n                chancer.integer(0, 9),\n                chancer.integer(0, 9), \n                '-',\n                chancer.integer(0, 9),\n                chancer.integer(0, 9),\n                '-',\n                chancer.integer(0, 9),\n                chancer.integer(0, 9),\n                chancer.integer(0, 9),\n                chancer.integer(0, 9),\n                collapse='')\n  \n  if(!dashes){\n    ssn <- gsub(\"-\", \"\", ssn)\n  }\n  \n  if(last_four){\n    ssn <- substr(ssn, nchar(ssn) - 3, nchar(ssn))\n  }\n  \n  return(ssn)\n}",
    "created" : 1418328395583.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2706053311",
    "id" : "C65F3A81",
    "lastKnownWriteTime" : 1418327051,
    "path" : "~/Dropbox/martin/github/chancer/R/person.R",
    "project_path" : "R/person.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}