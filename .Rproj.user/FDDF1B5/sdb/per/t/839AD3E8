{
    "contents" : "#' Returns a random bool\n#'\n#' @param likelihood sets the likelihood of returning TRUE from 0-100\n#' @export\n#' @examples\n#' chance.bool()\n#' chance.bool(10)\nchance.bool <- function(likelihood=50){\n  \n  if(likelihood < 0 || likelihood > 100){\n    stop(\"chance.bool accepts likelihood values from 0 to 100\")\n  }\n  \n  return(runif(1) * 100 <= likelihood)\n}\n\n#' Get a random character\n#'\n#' @param case select 'uppercase', 'lowercase' or 'all' for both cases\n#' @param pool select 'alpha' for just letters, 'numeric' for just numbers, \n#' 'symbol' for just symbols or 'all' for all \n#' @param user pass in string to select from your own pool of chars otherwise \n#' leave NULL. If this is not NULL then case and pool do nothing\n#' @export\n#' @examples\n#' chance.character('all', 'symbol')\n#' chance.character(user='i_am_a_test_string')\n#' \nchance.character <- function(case=c('all', 'lower', 'upper'), \n                             pool=c('all', 'alpha', 'numeric', 'symbol'),\n                             user=NULL){\n  \n  # check what case to use\n  casing <- match.arg(case)  \n  if(casing == 'upper'){\n    letters <- CHARS_UPPER\n  }else if(casing == 'lower'){\n    letters <- CHARS_LOWER\n  }else if(casing == 'all'){\n    letters <- paste0(CHARS_UPPER, CHARS_LOWER)\n  }else{\n    stop(\"casing must be one of 'upper', 'lower' or 'all'\")\n  }\n  \n  # check what pool of chars to use  \n  pooling <- match.arg(pool)\n  if(pooling == 'all'){\n    pool <- paste0(letters, SYMBOLS)\n  }else if(pool=='alpha'){\n    pool <- letters\n  }else if(pool=='numeric'){\n    pool <- NUMBERS\n  }else if(pool=='symbol'){\n    pool <- SYMBOLS\n  }\n  \n  # are we using user pool of chars?\n  if(!is.null(user)){\n    pool <- user\n  }\n  \n  # pick the random chars\n  tmp <- chance.pick(1:nchar(pool))\n  \n  # and return\n  return(substr(pool, tmp, tmp))\n}\n\n#' Get a random floating point number\n#'\n#' @param min minimum possible value\n#' @param max maximum possible value\n#' @param fixed maximum number of decimal place to allow. Note may return \n#' fewer decimal places, fixed is not guaranteed\n#' @export\n#' @examples\n#' chance.floating(0, 1, 2)\n#' \nchance.floating <- function(min=0, max=100, fixed=4){\n  \n  if(min > max){\n    stop('min must be smaller than max')\n  }\n  \n  return(round(runif(1, min, max), fixed))\n}\n\n#' Get a random integer\n#'\n#' @param min minimum possible value\n#' @param max maximum possible value\n#' @export\n#' @examples\n#' chance.integer()\n#' chance.integer(1, 25)\n#' \nchance.integer <- function(min=MIN_INT, max=MAX_INT){\n  \n  if(min > max){\n    stop('min must be smaller than max')\n  }\n  \n  return(as.integer(runif(1, min, max) + 0.5))\n}\n\n\n#' Get a random natural number\n#'\n#' @param min minimum possible value\n#' @param max maximum possible value\n#' @export\n#' @examples\n#' chance.natural()\n#' chance.natural(1, 25)\n#' \nchance.natural <- function(min=1, max=100){\n  return(chance.integer(min, max))\n}\n\n#' Get a random string\n#'\n#' @param len length of string to return\n#' @param case select 'uppercase', 'lowercase' or 'all' for both cases\n#' @param pool select 'alpha' for just letters, 'numeric' for just numbers, \n#' 'symbol' for just symbols or 'all' for all \n#' @param user if null string contains chars from \n#' 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@@#$%^&*()'\n#' else you can pass in a user defined string of chars\n#' @export\n#' @examples\n#' chance.string(len=10, user='xyz')\n#' chance.string(len=10, case='lower', pool='alpha')\n#' chance.string(len=10, pool='symbol')\n#' \nchance.string <- function(len=10, case='all', pool='all', user=NULL){\n  \n  chars <- sapply(1:len, function(x){\n    chance.character(case=case, pool=pool, user=user)\n  })\n  \n  chars <- paste0(chars, collapse=\"\", sep=\"\")\n  \n  return(chars)\n}\n\n",
    "created" : 1417794236709.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1423186996",
    "id" : "839AD3E8",
    "lastKnownWriteTime" : 1417600405,
    "path" : "~/Dropbox/Martin/github/chance/R/basics.R",
    "project_path" : "R/basics.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}